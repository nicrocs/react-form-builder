

var Question = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  renderShortAnswer: function() {
    return(
      <div className="question">
        <label className="questionLabel">
          {this.props.label}
        </label>
        <input placeholder={this.props.text} />
      </div>
    );

  },
  renderLongAnswer: function() {
    return(
      <div className="question">
        <label className="questionLabel">
          {this.props.label}
        </label>
        <textarea placeholder={this.props.text}></textarea>
      </div>
    );

  },
  renderSingleChoice: function() {
    var choiceNodes = this.props.choices.map(function(choice) {
      return (
        <Choice key={choice.id} type="radio" text={choice.text}>
        </Choice>
      );
    });
    return (
      <div className="question">
        <fieldset>
          <legend className="questionLabel">
            {this.props.label}
          </legend>
          {choiceNodes}
        </fieldset>
      </div>
    );

  },
  renderMultipleChoice: function() {
    var choiceNodes = this.props.choices.map(function(choice) {
      return (
        <Choice key={choice.id} type="checkbox" text={choice.text}>
        </Choice>
      );
    });
    return (
      <div className="question">
        <fieldset>
          <legend className="questionLabel">
            {this.props.label}
          </legend>
          {choiceNodes}
        </fieldset>
      </div>
    );
  },
  render: function() {
    var answerTypes = {
      short_answer: this.renderShortAnswer,
      long_answer: this.renderLongAnswer,
      single_choice: this.renderSingleChoice,
      multiple_choice: this.renderMultipleChoice
    };
    return answerTypes[this.props.type]();
    }
});

var Choice = React.createClass({
    render: function () {
      return(
        <div className="choice">
          <input type={this.props.type} value={this.props.text} id={this.props.key}/>
          <label for={this.props.key}>{this.props.text}</label>
        </div>
      );
    }
});

var QuestionBox = React.createClass({
  loadQuestionsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleQuestionSubmit: function(question) {
    var questions = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    question.id = Date.now();
    var newQuestions = questions.concat([question]);
    this.setState({data: newQuestions});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: question,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: questions});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  //TODO: live preview
  handleQuestionPreview: function(question) {
    this.setState({previewData:question});
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadQuestionsFromServer();
  },
  render: function() {
    return (
      <div className="questionBox">
        <div className="questionFormColumn">
          <QuestionForm onQuestionSubmit={this.handleQuestionSubmit} />

        </div>
        <div className="questionListColumn">
          <h1>Questions</h1>
          <QuestionList data={this.state.data} />
        </div>
      </div>
    );
  }
});
//TODO: live preview
var QuestionPreview = React.createClass({
  getInitalState: function() {
    console.log(this);
    return {data:[]};
  },
  render: function() {
      return (
        <Question type={this.props.data.type} label={this.props.data.label} key="questionPreview" text={this.props.data.text} choices={this.props.data.choices}>
        </Question>
      );
  }
});

var QuestionList = React.createClass({
  render: function() {
    var questionNodes = this.props.data.map(function(question) {
      if (question.choices) {
        return (
          <Question type={question.type} label={question.label} key={question.id} choices={question.choices}>
          </Question>
        );
      } else {
        return (
          <Question type={question.type} label={question.label} key={question.id} text={question.text}>
          </Question>
        );
      }

    });
    return (
      <div className="questionList">
        {questionNodes}
      </div>
    );
  }
});
var ChoiceInput = React.createClass({
  getInitalState: function() {
    return {choices:0}
  },
  addChoiceInput: function() {
    this.setState({choices:this.state.choices++})
  },
  render:function() {
    console.log(this);
    var choices = [];
    if (this.props.data.type === "single_choice" || this.props.data.type === "multiple_choice"){
      for (var i = 0; i < this.state.choices; i++) {
        choices.push(<input
          type="text"
          placeholder="Question Choice Text"
          value={this.props.data.text}
          onChange={this.handleTextChange}
        />)
      }
      choices.push(<button type="button" onClick={this.addChoiceInput}>Add Choice</button>)
    }
    return (
      <div>
        {choices}
      </div>
    );
  }
});
var QuestionForm = React.createClass({
  getInitialState: function() {
    return {label: '', text: '', type:''};
  },
  handleLabelChange: function(e) {
    this.setState({label: e.target.value});
  },
  handleTypeChange: function(e) {
    this.setState({type:e.target.value})
  },
  handleTextChange: function(e) {
    this.setState({text:e.target.value});
    this.addToChoices(e.target.value);
  },
  addToChoices: function(text) {
    var choices = [];
    choices.push({id:choices.length,text:text.trim()});
    this.setState({choices: choices});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var type = this.state.type.trim();
    var label = this.state.label.trim();
    var choices = this.state.choices;
    if (!type || !label) {
      return;
    }
    this.props.onQuestionSubmit({type: type, label: label, choices: choices});
    this.setState({type: '',label: ''});
  },
  //TODO: live preview
  handlePreview: function(e) {
    e.preventDefault();
    var type = this.state.type.trim();
    var label = this.state.label.trim();
    var text = this.state.text.trim();
    this.props.onQuestionChange({type:type, label:label, text:text});
  },
  render: function() {
    return (
      <form className="questionForm" onSubmit={this.handleSubmit}>
        <select onChange={this.handleTypeChange} value={this.state.type}>
          <option value="">Select a question type</option>
          <option value="short_answer">Short Answer</option>
          <option value="long_answer">Long Answer</option>
          <option value="single_choice">Single Choice</option>
          <option value="multiple_choice">Multiple Choice</option>
        </select>
        <input
          type="text"
          placeholder="Question Label"
          value={this.state.label}
          onChange={this.handleLabelChange}
        />
        <ChoiceInput data={this.state}></ChoiceInput>
        <button type="submit">Save</button>
      </form>
    );
  }
});

ReactDOM.render(
  <QuestionBox url="/api/questions" />,
  document.getElementById('content')
);
